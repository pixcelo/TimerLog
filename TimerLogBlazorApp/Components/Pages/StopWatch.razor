@page "/stopwatch"
@using TimerLogBlazorApp.Models
@using TimerLogBlazorApp.Services
@inject ITimerLogsService TimerLogsService
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>StopWatch</PageTitle>

<h3>StopWatch</h3>

<p>Time: @timeSpan.ToString(@"hh\:mm\:ss\.ff")</p>

<button type="button" class="btn btn-light" @onclick="StartStopwatch">スタート</button>
<button type="button" class="btn btn-light" @onclick="StopStopwatch">ストップ</button>
<button type="button" class="btn btn-light" @onclick="ResetStopwatch">リセット</button>

<br />
<br />

<button type="button" class="btn btn-light" style="margin-top: 20px;" @onclick="SaveTimerLog">保存</button>

@code {
    private TimeSpan timeSpan;
    private bool isRunning = false;
    private DateTime startTime;
    private Timer? timer;

    /// <summary>
    /// ストップウォッチを開始する
    /// </summary>
    private void StartStopwatch()
    {
        if (!isRunning)
        {
            startTime = DateTime.Now - timeSpan;
            timer = new Timer(UpdateTime, null, 0, 10);
            isRunning = true;
        }
    }

    /// <summary>
    /// ストップウォッチを停止する
    /// </summary>
    private void StopStopwatch()
    {
        if (isRunning)
        {
            timer?.Dispose();
            isRunning = false;
        }
    }

    /// <summary>
    /// ストップウォッチをリセットする
    /// </summary>
    private async void ResetStopwatch()
    {
        if (timeSpan == TimeSpan.Zero) return;

        var result = await JSRuntime.InvokeAsync<bool>(
            "confirm",
            "リセットしてもよろしいですか？");

        if (!result) return;
        
        StopStopwatch();
        timeSpan = TimeSpan.Zero;
        await InvokeAsync(StateHasChanged);
    }

    /// <summary>
    /// タイマーを更新する
    /// </summary>
    /// <param name="state"></param>
    private void UpdateTime(object? state)
    {
        timeSpan = DateTime.Now - startTime;
        InvokeAsync(StateHasChanged);
    }

    /// <summary>
    /// タイマーログを保存する
    /// </summary>
    private void SaveTimerLog()
    {
        var timerLog = new T_TimerLogs
        {
            UserId = 1,
            LogDate = DateTime.Now,
            ElapsedTime = (long)timeSpan.TotalMilliseconds,
        };

        TimerLogsService.Save(timerLog);
        ResetStopwatch();

        JSRuntime.InvokeVoidAsync("alert", "保存が完了しました。");
    }
}
