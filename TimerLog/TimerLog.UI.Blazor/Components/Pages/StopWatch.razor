@page "/stopwatch"
@rendermode InteractiveServer

@using TimerLog.WebAPI.Models
@inject HttpClient httpClient

<PageTitle>StopWatch</PageTitle>

<h3>StopWatch</h3>

<p>Time: @timeSpan.ToString(@"hh\:mm\:ss\.ff")</p>

<button type="button" class="btn btn-light" @onclick="StartStopwatch">スタート</button>
<button type="button" class="btn btn-light" @onclick="StopStopwatch">ストップ</button>
<button type="button" class="btn btn-light" @onclick="ResetStopwatch">リセット</button>

<br />

<select class="form-control">
    @foreach (var user in users)
    {
        <option value="@user.Id">@user.Name</option>
    }
</select>

<button type="button" class="btn btn-light" style="margin-top: 20px;">保存</button>

@code {
    private List<M_Users> users = new List<M_Users>();

    protected override async Task OnInitializedAsync()
    {
        users = await httpClient.GetFromJsonAsync<List<M_Users>>("api/Users");
    }

    private TimeSpan timeSpan;
    private bool isRunning = false;
    private DateTime startTime;
    private Timer? timer;

    /// <summary>
    /// ストップウォッチを開始する
    /// </summary>
    private void StartStopwatch()
    {
        if (!isRunning)
        {
            startTime = DateTime.Now - timeSpan;
            timer = new Timer(Updatetime, null, 0, 10);
            isRunning = true;
        }
    }

    /// <summary>
    /// ストップウォッチを停止する
    /// </summary>
    private void StopStopwatch()
    {
        if (isRunning)
        {
            timer?.Dispose();
            isRunning = false;
        }
    }

    /// <summary>
    /// ストップウォッチをリセットする
    /// </summary>
    private void ResetStopwatch()
    {
        StopStopwatch();
        timeSpan = TimeSpan.Zero;
    }

    /// <summary>
    /// タイマーを更新する
    /// </summary>
    /// <param name="state"></param>
    private void Updatetime(object? state)
    {
        timeSpan = DateTime.Now - startTime;
        InvokeAsync(StateHasChanged);
    }
}
